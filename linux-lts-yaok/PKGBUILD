# Maintainer: gontier-julien <gontierjulien68@gmail.com>

pkgbase=linux-lts-yaok
pkgver=5.15.50
pkgrel=1
pkgdesc='Linux-lts YAOK, Yet Another Optimized Kernel'
url='https://gitlab.com/alfredchen/linux-prjc'
arch=(x86_64 x86_64_v3)
license=(GPL2)
makedepends=(bc libelf pahole cpio perl tar xz 
             xmlto python-sphinx python-sphinx_rtd_theme graphviz imagemagick
             clang llvm llvm-libs lld)
options=('!strip')
_srcname=linux-${pkgver}
_patchsource="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/5.15"
_frogpatch="https://raw.githubusercontent.com/Frogging-Family/linux-tkg/master/linux-tkg-patches/5.15"
_xanpatch="https://raw.githubusercontent.com/xanmod/linux-patches/master/linux-5.15.y-xanmod"
source=(
  "https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${pkgver}.tar.xz"
  "${_frogpatch}/0009-prjc_v5.15-r1.patch"
  "${_patchsource}/prjc-fixes-v5/0001-prjc-fixes.patch"
  "${_xanpatch}/xanmod/0004-XANMOD-dcache-cache_pressure-50-decreases-the-rate-a.patch"
  "${_frogpatch}/0002-clear-patches.patch"
  "${_patchsource}/intel-patches/0001-intel-patches.patch"
  "${_patchsource}/fixes-miscellaneous-v9-sep/0001-net-sched-allow-configuring-cake-qdisc-as-default.patch"
  "${_patchsource}/fixes-miscellaneous-v9-sep/0008-nvme-don-t-memset-the-normal-read-write-command.patch"
  "${_patchsource}/fixes-miscellaneous-v9-sep/0009-mm-Stop-kswapd-early-when-nothing-s-waiting-for-it-t.patch"
  "${_patchsource}/fixes-miscellaneous-v9-sep/0010-mm-Fully-disable-watermark-boosting-when-it-isn-t-us.patch"
  "${_patchsource}/fixes-miscellaneous-v9-sep/0011-mm-Don-t-stop-kswapd-on-a-per-node-basis-when-there-.patch"
  "${_patchsource}/fixes-miscellaneous-v9-sep/0012-mm-Disable-watermark-boosting-by-default.patch"
  "${_patchsource}/spectre-patches/0001-spectre-patches.patch"
  "${_patchsource}/zstd-upstream-patches-v4-trunk/0001-zstd-upstream-patches.patch"
  "${_patchsource}/futex2-patches/0001-futex2-resync-from-gitlab.collabora.com.patch"
  "config"         # main kernel config
)
validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
)
sha256sums=('554d507d37a23810fe8c83912761e4a4f73c40794bc685ff7ca98042fe1bd70f' # Linux 5.15.50
            '930996cdd9b63e3456cc49da4015631717c1c2ec41f879b25a9100e95e0b38fb' # BMQ patch
            '751c01b80c77e6228788555fd8d35a7ed1aead07cac558feaf0f40f8b70621dd' # BMQ fix (merge request)
            '90763fdd59e518e5301d4be930c55c9ce4ab2205b0511b08ea39ea375fd900e8' # Xanmod patch 1
            '35a7cde86fb94939c0f25a62b8c47f3de0dbd3c65f876f460b263181b3e92fc0' # Clear-Linux patch
            '0c4fbcf7fc0764cc3b667faf210b8f6eba4d11e8b02522bd7fa3f9b21de73029' # Intel patch
            'ff123d6d15d1108e0c9e1c6bd78646b7e861854397f106d094453c96ff009591' # Fixes patch 1
            'eeb5ade5307abd99d8a007cd0cab09053b68a7096119d6e1453fa3bfa733e067' # Fixes patch 2
            '3005924973226e380e44951a82c978a8b3b6dd55a0558250f6682580047a3215' # Fixes patch 3
            '84b3cf5400ece652cc5ac237fca3eed1f86c714be1f666e5958a6d4cdaf49f02' # Fixes patch 4
            '3b04c66dc248f8b5a756f5670364cdd79f51e3b8990148313eb10d1c1aead6ab' # Fixes patch 5
            '5c3a57566f68f202c9ad219885fae6ab20946b54c575a2789f079edb22df3e03' # Fixes patch 6
            '902c3dda6ab6e3907b6bd35b450714d8c2db5d112fa245f442a96880da815d96' # Follow upstream patch [5.16](https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/commit/?h=for-next/seccomp&id=2f46993d83ff4abb310ef7b4beced56ba96f0d9d)
            'f26e08ff41dcbaf478adc8c69f73e5fb4f688102ea44684ad520db76c3b0e22a' # Upstream Zstd patch
            'b9a551e09a571db677f90b55badd8e20dc743c4c887df64812dde3fc0eaf2e67' # Futex2 patch
            'ba2ea2a087fd6c84603e64cc30ce69d3f90fa28522223fd4ffd1dbb3fa678d40') #config

BUILD_FLAGS=(
  CC=clang CXX=clang++ LD=ld.lld
  LLVM=1
  LLVM_IAS=1
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd $_srcname

  echo "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."
  cp ../config .config
# make prepare
  make ${BUILD_FLAGS[*]} olddefconfig

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"

  echo -e "\033[0;32mEnabling BMQ Scheduler..."
  scripts/config --enable CONFIG_SCHED_ALT
  scripts/config --enable CONFIG_SCHED_BMQ
  scripts/config --disable CONFIG_SCHED_PDS

  echo -e "\033[0;32mEnabling LLVM FULL-LTO..."
  scripts/config --enable LTO_CLANG_FULL
  scripts/config --disable LTO_CLANG_THIN
  scripts/config --disable LTO_NONE

  echo -e "\033[0;31mDisabling NUMA by default..."
  scripts/config --disable CONFIG_NUMA
  echo -e "\033[0;31mDisabling SELinux..."
  scripts/config --disable CONFIG_SECURITY_SELINUX
  echo -e "\033[0;31mDisabling TOMOYO..."
  scripts/config --disable CONFIG_SECURITY_TOMOYO
  echo -e "\033[0;31mDisabling AppArmor..."
  scripts/config --disable CONFIG_SECURITY_APPARMOR
  scripts/config --set-str CONFIG_LSM lockdown,yama,integrity
  echo -e "\033[0;31mDisabling YAMA..."
  scripts/config --disable CONFIG_SECURITY_YAMA
  scripts/config --set-str CONFIG_LSM lockdown,integrity,apparmor
  echo -e "\033[0;32mEnabling Fsync support..."
  scripts/config --enable CONFIG_FUTEX
  scripts/config --enable CONFIG_FUTEX_PI
  echo -e "\033[0;32mEnabling Futex2 support..."
  scripts/config --enable CONFIG_FUTEX2
  echo -e "\033[0;32mEnabling winesync support..."
  scripts/config --module CONFIG_WINESYNC

  echo -e "\033[0;31mDisabling TCP_CONG_CUBIC..."
  scripts/config --module CONFIG_TCP_CONG_CUBIC
  scripts/config --disable CONFIG_DEFAULT_CUBIC
  echo -e "\033[0;31mDisabling TCP_CONG_RENO..."
  scripts/config --module CONFIG_TCP_CONG_RENO
  scripts/config --disable CONFIG_DEFAULT_RENO
  echo -e "\033[0;32mEnabling TCP_CONG_BBR..."
  scripts/config --enable CONFIG_TCP_CONG_BBR
  scripts/config --enable CONFIG_DEFAULT_BBR
  scripts/config --set-str CONFIG_DEFAULT_TCP_CONG bbr
  echo -e "\033[0;32mSet CAKE as the default queuing..."
  scripts/config --enable DEFAULT_CAKE

  echo -e "\033[0;32mSetting performance governor..."
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
  scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
  echo -e "\033[0;31mDisabling uneeded governors..."
  scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
  scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
  scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
  scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL

  echo -e "\033[0;32mEnabling PREEMPT..."
  scripts/config --disable CONFIG_PREEMPT_NONE
  scripts/config --disable CONFIG_PREEMPT_VOLUNTARY
  scripts/config --enable CONFIG_PREEMPT
  scripts/config --enable CONFIG_PREEMPT_COUNT
  scripts/config --enable CONFIG_PREEMPTION
  scripts/config --enable CONFIG_PREEMPT_DYNAMIC

  echo -e "\033[0;31mDisabling some additional debuging..."
  scripts/config --disable CONFIG_DEBUG_BUGVERBOSE

  echo -e "\033[0;31mRemove CleanCache..." #https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/commit/?id=612de5464f4077e4918eed99f4b31cfbd0781c69
  scripts/config --disable CONFIG_CLEANCACHE
}

build() {
  cd $_srcname
  make ${BUILD_FLAGS[*]} -j$(nproc) all
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(coreutils kmod initramfs)
  optdepends=('wireless-regdb: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE)

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(clang llvm llvm-libs lld pahole)

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done