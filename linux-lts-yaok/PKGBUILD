# Maintainer: gontier-julien <gontierjulien68@gmail.com>

_major=5.15
_minor=6
pkgbase=linux-lts-yaok
pkgver=${_major}.${_minor}
pkgrel=2
pkgdesc='Linux-lts YAOK, Yet Another Optimized Kernel'
url='https://gitlab.com/alfredchen/linux-prjc'
arch=(x86_64 x86_64_v3)
license=(GPL2)
makedepends=(bc kmod libelf pahole cpio perl tar xz 
             xmlto python-sphinx python-sphinx_rtd_theme graphviz imagemagick
             clang llvm lld)
options=('!strip')
_srcname=linux-${pkgver}
_patchsource="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/5.15"
_xanpatch="https://raw.githubusercontent.com/xanmod/linux-patches/master/linux-5.15.y-xanmod"
source=(
  "https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${pkgver}.tar.xz"
  "https://gitlab.com/alfredchen/projectc/-/raw/master/5.15/prjc_v5.15-r1.patch"
  #"${_patchsource}/arch-patches/0001-ZEN-Add-sysctl-and-CONFIG-to-disallow-unprivileged-C.patch"
  "${_xanpatch}/xanmod/0005-XANMOD-dcache-cache_pressure-50-decreases-the-rate-a.patch"
  "${_xanpatch}/xanmod/0009-XANMOD-scripts-disable-the-localversion-tag-of-a-git.patch"
  "${_patchsource}/bbr2-patches/0001-bbr2-5.15-introduce-BBRv2.patch"
  "${_patchsource}/clearlinux-patches/0001-clearlinux-patches.patch"
  "${_patchsource}/lrng-upstream-patches-v2/0001-lrng-patches.patch"
  "${_patchsource}/fixes-miscellaneous-v8-sep/0004-scsi-sd-Optimal-I-O-size-should-be-a-multiple-of-rep.patch"
  "${_patchsource}/fixes-miscellaneous-v8-sep/0009-mm-Stop-kswapd-early-when-nothing-s-waiting-for-it-t.patch"
  "${_patchsource}/fixes-miscellaneous-v8-sep/0010-mm-Fully-disable-watermark-boosting-when-it-isn-t-us.patch"
  "${_patchsource}/fixes-miscellaneous-v8-sep/0011-mm-Don-t-stop-kswapd-on-a-per-node-basis-when-there-.patch"
  "${_patchsource}/fixes-miscellaneous-v8-sep/0012-mm-Disable-watermark-boosting-by-default.patch"
  "${_patchsource}/spectre-patches/0001-spectre-patches.patch"
  "${_patchsource}/block-ll-patches-v2-sep/0003-block-set-rq_affinity-2-for-full-multithreading-I-O.patch"
  "${_patchsource}/zstd-patches/0001-zstd-patches.patch"
  "${_patchsource}/zstd-upstream-patches-v4/0001-zstd-upstream-patches.patch"
#  "${_patchsource}/futex-patches/0001-futex-resync-from-gitlab.collabora.com.patch"
  "${_patchsource}/futex2-patches/0001-futex2-resync-from-gitlab.collabora.com.patch"
  "config"         # main kernel config
)
sha256sums=('b3e9ba06a299a3e2ead4a15753bc46a3e0c90d3b92ffeed1034ccc9f13a717f0' #Linux 5.15.6
            '768239d739180c0199545b5c5cf2d78de6261aec769008e6a2b7e97c7477b756' # BMQ patch
            #'a19c0e3da9694764b15ce9d0af8cc2a4a53eed98f35b7e3324508f26f9deec4c' # Arch patch
            'a1a910a881c7f00df748fd2893ab5a768e36fe57b7c1d8865ada0ec55a062e44' # Xanmod patch 1
            'c62d32da55479d791de7c8426fe3202faedc3294cafc05dd478f6d7e9cc0cdd3' # Xanmod patch 2
            'b45ab5ea4b37c980d44fa6ace284aa04aee36c61374ec2145c0cd73a791df42a' # BBR2 patch
            '9a13fbcdd6c7ce86ce963653e893bb2f3235e97eb77d9bc88ae2a4e5156d272f' # Clear-Linux patch
            '072d3a7061582d5f43f83e312fb473285068d49219d0dfefc8aee3033de9414a' # LRNG patch
            '59ca76fd450b458b643386e039bbff037372155bd019217c0cb7fdafc9795f38' # Fixes patch 1
            '3be185ec6614e0410d681beb03f0c27b489bb21b4f71dd0d45d6f7a7d3bccb10' # Fixes patch 2
            '891df4df3881c3ba0589e8648aeb9e586d4c81ad390cb6f51967341befa36106' # Fixes patch 3
            '382e8317c5157508aafcfcdc556a1c47ac9f2e8a90faa496b7066b599c7b45d8' # Fixes patch 4
            '864f4b77053bad8ea744866367b3bde50df517745235e471c39b944b5608e44f' # Fixes patch 5
            '902c3dda6ab6e3907b6bd35b450714d8c2db5d112fa245f442a96880da815d96' # Follow upstream patch [5.16](https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/commit/?h=for-next/seccomp&id=2f46993d83ff4abb310ef7b4beced56ba96f0d9d)
            '50a891cd23222b3fcf997cf16bc15088871ba2f31a39fdfa97973715bbbf6e3e' # Multithreading I/O patch
            '74c84814a670c68f0291f94b76fe00eac96b0e7965ed1762dbffd7c938dd9fdc' # Zstd patch
            '6405bd97bb9b443fdb98de90f9962717d6613d68c73df8fa774d727677784db3' # Upstream Zstd patch
            #'4c07123b8b8e95e4ec8fc36371aa7093c5af887b1e61251eb25db8c8ddc6ccf5' # Futex patch
            'b9a551e09a571db677f90b55badd8e20dc743c4c887df64812dde3fc0eaf2e67' # Futex2 patch
            'SKIP') #config

BUILD_FLAGS=(
  LLVM=1
  LLVM_IAS=1
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd $_srcname

  echo "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."
  cp ../config .config
#  make prepare
  make ${BUILD_FLAGS[*]} olddefconfig

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"

  # CONFIG_STACK_VALIDATION gives better stack traces. Also is enabled in all official kernel packages by Archlinux team
  scripts/config --enable CONFIG_STACK_VALIDATION

  echo -e "\033[0;32mEnabling BMQ Scheduler..."
  scripts/config --enable CONFIG_SCHED_ALT
  scripts/config --enable CONFIG_SCHED_BMQ
  scripts/config --disable CONFIG_SCHED_PDS

  echo -e "\033[0;32mEnabling KBUILD_CFLAGS -O3..."
  scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
  scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3

  echo -e "\033[0;32mEnabling LLVM Thin-LTO..."
  scripts/config --disable CONFIG_LTO_NONE
  scripts/config -e LTO_CLANG_THIN 

  echo -e "\033[0;31mDisabling NUMA by default..."
  scripts/config --disable CONFIG_NUMA
  echo -e "\033[0;31mDisabling SELinux..."
  scripts/config --disable CONFIG_SECURITY_SELINUX
  echo -e "\033[0;31mDisabling TOMOYO..."
  scripts/config --disable CONFIG_SECURITY_TOMOYO
  echo -e "\033[0;31mDisabling AppArmor..."
  scripts/config --disable CONFIG_SECURITY_APPARMOR
  scripts/config --set-str CONFIG_LSM lockdown,yama,integrity
  echo -e "\033[0;31mDisabling YAMA..."
  scripts/config --disable CONFIG_SECURITY_YAMA
  scripts/config --set-str CONFIG_LSM lockdown,integrity,apparmor
  echo -e "\033[0;32mEnabling Fsync support..."
  scripts/config --enable CONFIG_FUTEX
  scripts/config --enable CONFIG_FUTEX_PI
  echo -e "\033[0;32mEnabling Futex2 support..."
  scripts/config --enable CONFIG_FUTEX2
  echo -e "\033[0;32mEnabling winesync support..."
  scripts/config --module CONFIG_WINESYNC

  echo -e "\033[0;32mEnabling highest ZSTD compression ratio..."
  scripts/config --set-val CONFIG_KERNEL_ZSTD_LEVEL 19
  scripts/config --enable CONFIG_KERNEL_ZSTD_LEVEL_ULTRA
  echo -e "\033[0;32mEnabling standard ZSTD module compression ratio..."
  scripts/config --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL 19
  scripts/config --disable CONFIG_MODULE_COMPRESS_ZSTD_ULTRA

  echo -e "\033[0;31mDisabling TCP_CONG_CUBIC..."
  scripts/config --module CONFIG_TCP_CONG_CUBIC
  scripts/config --disable CONFIG_DEFAULT_CUBIC
  echo -e "\033[0;31mDisabling TCP_CONG_RENO..."
  scripts/config --module CONFIG_TCP_CONG_RENO
  scripts/config --disable CONFIG_DEFAULT_RENO
  echo -e "\033[0;32mEnabling TCP_CONG_BBR2..."
  scripts/config --enable CONFIG_TCP_CONG_BBR2
  scripts/config --enable CONFIG_DEFAULT_BBR2
  scripts/config --set-str CONFIG_DEFAULT_TCP_CONG bbr2
  echo -e "\033[0;32mSet CAKE as the default queuing..."
  scripts/config --set-str CONFIG_DEFAULT_NET_SCH cake

  echo -e "\033[0;32mSetting performance governor..."
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
  scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
  echo -e "\033[0;31mDisabling uneeded governors..."
  scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
  scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
  scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
  scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL

  echo -e "\033[0;32mEnabling PREEMPT..."
  scripts/config --disable CONFIG_PREEMPT_NONE
  scripts/config --disable CONFIG_PREEMPT_VOLUNTARY
  scripts/config --enable CONFIG_PREEMPT
  scripts/config --enable CONFIG_PREEMPT_COUNT
  scripts/config --enable CONFIG_PREEMPTION
  scripts/config --enable CONFIG_PREEMPT_DYNAMIC

  echo -e "\033[0;32mEnabling multigenerational LRU..."
  scripts/config --enable CONFIG_HAVE_ARCH_PARENT_PMD_YOUNG
  scripts/config --enable CONFIG_LRU_GEN
  scripts/config --set-val CONFIG_NR_LRU_GENS 7
  scripts/config --set-val CONFIG_TIERS_PER_GEN 4
  scripts/config --enable CONFIG_LRU_GEN_ENABLED
  scripts/config --disable CONFIG_LRU_GEN_STATS

  echo -e "\033[0;31mDisabling some additional debuging..."
  scripts/config --disable CONFIG_DEBUG_BUGVERBOSE
}

build() {
  cd $_srcname
  make ${BUILD_FLAGS[*]} -j$(nproc) all
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(coreutils kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices'
              'usbctl: deny_new_usb control')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE)

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers" )
depends=(clang llvm lld)
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done
