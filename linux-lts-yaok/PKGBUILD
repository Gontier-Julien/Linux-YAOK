# Maintainer: gontier-julien <gontierjulien68@gmail.com>

pkgbase=linux-lts-yaok
pkgver=5.15.80
pkgrel=1
pkgdesc='Linux-lts YAOK, Yet Another Optimized Kernel'
url='https://cdn.kernel.org/'
arch=(x86_64 x86_64_v3)
license=(GPL2)
makedepends=(bc libelf pahole cpio perl tar xz 
             xmlto python-sphinx python-sphinx_rtd_theme graphviz imagemagick
             clang llvm llvm-libs lld)
options=('!strip')
_srcname=linux-${pkgver}
#_patchsource="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/5.15"
_frogpatch="https://raw.githubusercontent.com/Frogging-Family/linux-tkg/master/linux-tkg-patches/5.15"
_patchsource="https://raw.githubusercontent.com/CachyOS/kernel-patches/master/5.15" # Temporary until next LTS and/or self made patch
source=(
  "https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${pkgver}.tar.xz"
  "https://raw.githubusercontent.com/graysky2/kernel_compiler_patch/master/more-uarches-for-kernel-5.15-5.16.patch"
  "${_frogpatch}/0003-glitched-cfs-additions.patch"
  "${_frogpatch}/0002-clear-patches.patch"
  "${_patchsource}/AMD/0001-amd-c3.patch"
  "${_patchsource}/0001-intel-patches.patch"
  "${_patchsource}/0001-lqx-patches.patch"
#  "${_patchsource}/0001-fixes-miscellaneous.patch"
#  "${_patchsource}/fixes-miscellaneous-v9-sep/0009-mm-Stop-kswapd-early-when-nothing-s-waiting-for-it-t.patch"
#  "${_patchsource}/fixes-miscellaneous-v9-sep/0010-mm-Fully-disable-watermark-boosting-when-it-isn-t-us.patch"
#  "${_patchsource}/fixes-miscellaneous-v9-sep/0012-mm-Disable-watermark-boosting-by-default.patch"
  "${_patchsource}/0001-spectre-patches.patch"
  "https://raw.githubusercontent.com/Frogging-Family/community-patches/master/linux517-tkg/lru_5.17.mypatch"
  "${_patchsource}/0001-zstd-upstream-patches.patch"
  "${_frogpatch}/0007-v5.15-futex_waitv.patch"
  "config" # Kernel config
)
validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886' # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E' # Greg Kroah-Hartman
  'E27E5D8A3403A2EF66873BBCDEA66FF797772CDC' # Sasha Levin
)
b2sums=('750121c79c4c7a64735cfe9417eb15689d1e9796810c4ae1f56f2bba9ee5cf4c5c920fa8d8962b24c7ca016ca6e23749a5da86310e52e6710744f61f2704cf0f' # Linux 5.15.80
        '2c63d377bbefbdda15f805bfb1ca24880a65d0c8760a27d2f7e354f551002cd165ddb16b827ce558bab0c042247b47eca4db263ba721353053706ba1819e7b99' # Graysky2 patch for x86-64-v3
        '4d71339dc96627043e843fa0a627fbf7ee7b25bf5388cf95cc98cf5a04cfd12778ad194ab4a12233d499bf6683189fe285514a240e88807eefec0718e014c20a' # Frog TKG CFS patch
        'c270f1ad7b3898ea499f0a3dad93708f3546f5be66e7f912b192093d734477e8f0210f318d28be432f0ffff7cf10ea7d849234b3164ce62aa4cdd7fe426d4b5c' # Clear-Linux patch
        '278869ec65025e3060dcb81f1a9019cf0f1ea610bf4ec6fd4913f6de09650d8acab57605f8fe2950880ea6fbf9dbdc9ad9b221056fea46905701145f4876a295' # AMD C3 patch
        'dc7c45d57d50c4b019cb2fd5bf3d4ec019a7d3dd4a4e62bef324f75319d7bd9ed4c7faf96941d4f85c3504352b403fa5696c34878df08c62cbb17927648e0900' # Intel patch
        'ac7cbdee62a8b5b685796cf5a60ba03c34515e4f2af859daf4d336d2bd7ed569b45fe8be09c1b5153830b3aa4a7cd7c71c81724c7d2c53fa91a01f322f5647c1' # MSR patch
#        '7fbda3cb68906757cb55b2afe025193d073362cfa5e5e70c0e5b524d4ea1a49580af067d23165da230292be83df0695333fee2e30ba8a780adbae923f5b1bfe2' # Fixes patch 
#        '2fdb5d2a19a7dadffb1c9f0c8087412cd06e806ed7a71c471f4dc59e33f6d0f84afee0a32dea8193c4a92238bbd6bafb65a79f12188f29fa0076a3dfd24cb975' # Fixes patch 1
#        'c5bcc441fe36a02c713f08ff0036679c469af196a23a899094afca99edfd7e7f531a3106731a2fae23e8725d21086e4442c1d762b8e79d32dce5a901c42f40d8' # Fixes patch 2
#        '512c38c85a729dda91933fb13dcd55f12407e7afbbe6475f0a1b674161b247bf3578d2b48ff6dad43533a83501996afdaac8b028ca36a1513e5b17cc9c32463a' # Fixes patch 3
        '7973116c2d8735bae92436356322679cb518820e2e7fea267e85bcc2bd8bc594f489b9b7396a8e811d4ef9e87ea3731e45b027cd7ede23565ef55f35f8d6cff1' # Follow upstream patch [5.16](https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/commit/?h=for-next/seccomp&id=2f46993d83ff4abb310ef7b4beced56ba96f0d9d)
        'd3ea62db068344d766abd61173c2a7e724fe8168386ab9bad9713643f0b990349ce9da13d8a1dcb4c187a6bd5a95f27c71f31ba96e928ff1c569a37d67d1bb2a' # MGLRU patch
        '0b9f99bdd1b493f9b33394fba180a45f9d32a6b63c96729af01c0453316eb75d11ece29c2286405324878a4e357795753a2c7521d118d9b03fc0f7f762af8861' # Upstream Zstd patch
        '23ee085c2a54ddcad781bc0e6da352f1299350e494b34f8833c729f69e596b4da73a5df47a88ad80109163b0553993498612f14ef5527400eed2cda379984c24' # Futex2 patch
        '238d3ffab27d591ac5ccd50bf91d42780ca53052c9a6caab5d178aa2ea30db30fa39a0958295fb007264bc7f80ff260bbbe213ee1c9ebcf5578462022e108643') # Kernel config

BUILD_FLAGS=(
  CC=clang CXX=clang++ LD=ld.lld
  LLVM=1
  LLVM_IAS=1
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd $_srcname

  echo "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."
  cp ../config .config
# make prepare
  make ${BUILD_FLAGS[*]} olddefconfig

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"

  echo -e "\033[0;32mEnabling Frog TKG CFS patch..."
  scripts/config --enable CONFIG_ZENIFY

  echo -e "\033[0;32mEnabling LLVM FULL-LTO..."
  scripts/config --enable LTO_CLANG_FULL
  scripts/config --disable LTO_CLANG_THIN
  scripts/config --disable LTO_NONE

  echo -e "\033[0;31mDisabling NUMA by default..."
  scripts/config --disable CONFIG_NUMA
  echo -e "\033[0;31mDisabling SELinux..."
  scripts/config --disable CONFIG_SECURITY_SELINUX
  echo -e "\033[0;31mDisabling TOMOYO..."
  scripts/config --disable CONFIG_SECURITY_TOMOYO
  echo -e "\033[0;31mDisabling AppArmor..."
  scripts/config --disable CONFIG_SECURITY_APPARMOR
  echo -e "\033[0;31mDisabling YAMA..."
  scripts/config --disable CONFIG_SECURITY_YAMA
  echo -e "\033[0;31mSetting LSM accordingly..."
  scripts/config --set-str CONFIG_LSM landlock,lockdown,integrity,bpf

  echo -e "\033[0;32mEnabling Futex2 support..."
  scripts/config --enable CONFIG_FUTEX2

  echo -e "\033[0;31mDisabling TCP_CONG_CUBIC..."
  scripts/config --module CONFIG_TCP_CONG_CUBIC
  scripts/config --disable CONFIG_DEFAULT_CUBIC
  echo -e "\033[0;31mDisabling TCP_CONG_RENO..."
  scripts/config --module CONFIG_TCP_CONG_RENO
  scripts/config --disable CONFIG_DEFAULT_RENO
  echo -e "\033[0;32mEnabling TCP_CONG_BBR..."
  scripts/config --enable CONFIG_TCP_CONG_BBR
  scripts/config --enable CONFIG_DEFAULT_BBR
  scripts/config --set-str CONFIG_DEFAULT_TCP_CONG bbr
  echo -e "\033[0;32mSet CAKE as the default queuing..."
  scripts/config --set-str DEFAULT_NET_SCH cake

  echo -e "\033[0;32mSetting performance governor..."
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
  scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
  echo -e "\033[0;31mDisabling uneeded governors..."
  scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
  scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
  scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
  scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL

  echo -e "\033[0;31mDisabling Core Scheduling for SMT..."
  scripts/config --disable CONFIG_SCHED_CORE

  echo -e "\033[0;32mEnabling PREEMPT..."
  scripts/config --disable CONFIG_PREEMPT_NONE
  scripts/config --disable CONFIG_PREEMPT_VOLUNTARY
  scripts/config --enable CONFIG_PREEMPT
  scripts/config --enable CONFIG_PREEMPT_COUNT
  scripts/config --enable CONFIG_PREEMPTION
  scripts/config --enable CONFIG_PREEMPT_DYNAMIC

  echo -e "\033[0;31mDisabling some additional debuging..."
  scripts/config --disable CONFIG_DEBUG_BUGVERBOSE

  echo -e "\033[0;31mRemove CleanCache..." #https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/commit/?id=612de5464f4077e4918eed99f4b31cfbd0781c69
  scripts/config --disable CONFIG_CLEANCACHE
}

build() {
  cd $_srcname
  make ${BUILD_FLAGS[*]} -j$(nproc) all
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(coreutils kmod initramfs)
  optdepends=('wireless-regdb: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE)

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(clang llvm llvm-libs lld pahole)

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  #install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done